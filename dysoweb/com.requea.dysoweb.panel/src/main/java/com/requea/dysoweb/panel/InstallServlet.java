package com.requea.dysoweb.panel;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.OutputStreamWriter;import java.io.Writer;import java.text.DateFormat;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.concurrent.ConcurrentHashMap;import java.util.zip.GZIPOutputStream;import javax.servlet.RequestDispatcher;import javax.servlet.ServletConfig;import javax.servlet.ServletException;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.osgi.framework.BundleContext;import org.osgi.framework.ServiceReference;import org.osgi.service.obr.RepositoryAdmin;import org.osgi.service.packageadmin.PackageAdmin;import org.w3c.dom.Element;import com.requea.dysoweb.panel.SecurityServlet.RegistrationException;import com.requea.dysoweb.panel.monitor.AjaxProgressMonitor;import com.requea.dysoweb.panel.tags.ErrorTag;import com.requea.dysoweb.panel.utils.ISO8601DateTimeFormat;import com.requea.dysoweb.util.xml.XMLUtils;import com.requea.dysoweb.panel.InstallManager.Status;public class InstallServlet extends HttpServlet {	public static final String CATEGORY = "com.requea.dysoweb.category";	public static final String INSTALLABLE = "com.requea.dysoweb.installable";	public static final String INSTALLED = "com.requea.dysoweb.installed";	public static final String COM_REQUEA_DYSOWEB_PANEL = "com.requea.dysoweb.panel.";		private static final String INSTALL_MONITOR = "com.requea.dysoweb.panel.install.monitor";	private static final String INSTALL_STATUS = "com.requea.dysoweb.panel.install.status";	private static final long serialVersionUID = -680556291402571674L;	    protected static final DateFormat format = new ISO8601DateTimeFormat();	private static final int DEFAULT_REPO_REGISTRATION_TIMEOUT = 60*1000;		public static final String REGISTERED = "com.requea.dysoweb.registered";	private File fConfigDir;	private File fBinDir;	private InstallManager fInstallManager;		public void init(ServletConfig config) throws ServletException {		super.init(config);		fConfigDir = SecurityServlet.getConfigDir(config.getServletContext());		fConfigDir.mkdirs();		fBinDir = SecurityServlet.getBinDir(config.getServletContext());				fInstallManager = new InstallManager(fConfigDir, fBinDir);	}		public void destroy() {		super.destroy();	}	protected void doGet(HttpServletRequest request, HttpServletResponse response)			throws ServletException, IOException {		process(request, response);	}	protected void doPost(HttpServletRequest request, HttpServletResponse response)	throws ServletException, IOException {		process(request, response);	}	private void process(HttpServletRequest request,			HttpServletResponse response) throws ServletException, IOException {				String op = request.getParameter("op");		Element elConfig = InstallManager.getServerConfig(fConfigDir);		// first of all, check if the server is a registered server		if (elConfig == null && !"register".equals(op)) {			// include registration page			String ru = response.encodeURL(request.getRequestURI());			request.setAttribute("com.requea.dysoweb.panel.ru", ru);						RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure.jsp");			rd.forward(request, response);			return;		}				File fileCertificate = new File(fConfigDir, "dysoweb.p12");		boolean registered = fileCertificate.exists();		request.setAttribute(InstallServlet.REGISTERED, new Boolean(registered));				if("status".equals(op)) {			handleStatusRequest(request, response);			return;		} else if ("register".equals(op)) {			String ru = request.getParameter("ru");			// check host name			request.setAttribute("com.requea.dysoweb.panel.ru", ru == null ? "" : ru);						if (!checkParameters(request, response)) {				// re forward to registration for correction of errors				RequestDispatcher rd = request						.getRequestDispatcher("/dysoweb/panel/secure.jsp");				rd.forward(request, response);				return;			}			// register the server and goes back to callers page			try {								String authKey = request.getParameter("AuthKey");				String strPassword = request.getParameter("Password");				saveConfig(fConfigDir, authKey, strPassword);				// from this point on, we are authenticated				HttpSession session = request.getSession();				session.setAttribute(SecurityFilter.SECURED, Boolean.TRUE);				session.setAttribute(SecurityFilter.AUTH, Boolean.TRUE);				session.setAttribute("com.requea.dysoweb.shell.auth", Boolean.TRUE);				// save the settings and switch to the install page				updateSettingsValues(request);								saveSettings(request);								if(!registered) {			        String repoURL = getValueFromSession(request.getSession(), "RepoURL");			        if(repoURL == null || repoURL.length() == 0) {			        	repoURL = InstallManager.DEFAULT_REPO;			        }			        if(repoURL.startsWith("https")) {			        	// update server registration if not already done			        	fInstallManager.updateServerRegistration(repoURL, authKey, strPassword);			        }				}								// reset the http client				fInstallManager.reset();				session.removeAttribute(InstallManager.INSTALLABLES);			} catch (Exception e) {				request.setAttribute(ErrorTag.ERROR,						"Unable to register server: " + e.getMessage());				// re forward to registration for correction of errors				RequestDispatcher rd = request						.getRequestDispatcher("/dysoweb/panel/secure.jsp");				rd.forward(request, response);				return;			}			// registration was ok, redirect to the install page			response.sendRedirect(response.encodeURL(request.getContextPath()					+ "/dysoweb/panel/secure/install?refresh=true"));					} else if("install".equals(op)) {			// check if server certificate is there			File file = new File(fConfigDir, "dysoweb.p12");			if(!file.exists()) {				try {					// reset the socket factory					response.sendRedirect(response.encodeURL(request.getContextPath()							+ "/dysoweb/panel/bundle.jsp"));					return;				} catch(Exception e) {					// ignore				}			}			// init the http client			try {				fInstallManager.initHttpClient(elConfig);			} catch(Exception e) {				request.setAttribute(ErrorTag.ERROR,						"Unable to register server: " + e.getMessage());				// re forward to registration for correction of errors				RequestDispatcher rd = request						.getRequestDispatcher("/dysoweb/panel/secure/settings.jsp");				rd.forward(request, response);				return;			}										handleInstallBundleRequest(request, response, elConfig);		} else if("image".equals(op)) {			// render the image			String image = request.getParameter("image");			if(image != null) {				File f = new File(fConfigDir, "products/image/"+image+".jpg");				if(!f.exists()) {					response.sendError(404);				} else {					// output the image					int length = (int)f.length();					response.setContentLength(length);					response.setContentType("img/jpeg");					OutputStream os = response.getOutputStream();					InputStream is = new FileInputStream(f);		            byte[] buffer = new byte[4096];		            int count = 0;		            for (int len = is.read(buffer); len > 0; len = is.read(buffer))		            {		                count += len;		                os.write(buffer, 0, len);		            }		            os.close();		            is.close();					return;				}			} else {				response.sendError(404);			}		} else if("save".equals(op)) {			// save the settings and switch to the install page			updateSettingsValues(request);	        HttpSession session = request.getSession();	        String newAuthKey = (String)session.getAttribute(COM_REQUEA_DYSOWEB_PANEL+"AuthKey");	        String oldAuthKey = XMLUtils.getChildText(elConfig, "AuthKey");	        			saveSettings(request);						if(!registered || (oldAuthKey != null && !oldAuthKey.equals(newAuthKey))) {		        String repoURL = getValueFromSession(request.getSession(), "RepoURL");		        if(repoURL == null || repoURL.equals("")) {		        	repoURL = InstallManager.DEFAULT_REPO;		        }		        if(repoURL.startsWith("https")) {		        	// update server registration if not already done		        	try {						fInstallManager.updateServerRegistration(repoURL, newAuthKey, null);					} catch (Exception e) {						request.setAttribute(ErrorTag.ERROR,								"Unable to register server: " + e.getMessage());						// re forward to registration for correction of errors						RequestDispatcher rd = request								.getRequestDispatcher("/dysoweb/panel/secure/settings.jsp");						rd.forward(request, response);						return;					}		        }			}						// reset the http client			fInstallManager.reset();			session.removeAttribute(InstallManager.INSTALLABLES);			// from this point on, we are authenticated			session.setAttribute(SecurityFilter.AUTH, Boolean.TRUE);			session.setAttribute(SecurityFilter.SECURED, Boolean.TRUE);			session.setAttribute("com.requea.dysoweb.shell.auth", Boolean.TRUE);			// redirect to install			response.sendRedirect(request.getContextPath()+"/dysoweb/panel/secure/install");			return;		} else if("true".equals(request.getParameter("settings"))) {			// redirect to settings			initSettingsValues(request);			updateSettingsValues(request);			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/settings.jsp");			rd.forward(request, response);			return;		} else {			try {				handleInstallPanelRequest(request, response, elConfig);			} catch (Exception e) {				// show the error				request.setAttribute(ErrorTag.ERROR, "Unable to retrieve installable application list: " + e.getMessage());				RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/setup.jsp");				rd.forward(request, response);			}		}	}	private boolean checkParameters(HttpServletRequest request,			HttpServletResponse response) {		// check the parameters		String authkey = request.getParameter("AuthKey");		if (authkey == null) {			request.setAttribute(ErrorTag.ERROR, "Authorization Key is required");			return false;		}		String pass1 = request.getParameter("Password");		if (pass1 == null) {			request.setAttribute(ErrorTag.ERROR, "Password is required");			return false;		}		String pass2 = request.getParameter("Password2");		if (!pass1.equals(pass2)) {			request.setAttribute(ErrorTag.ERROR, "Passwords do not match");			return false;		}		return true;	}		private void handleStatusRequest(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {		// retrieve the monitor		HttpSession session = request.getSession();		Object objMonitorId = session.getAttribute(INSTALL_MONITOR);		Object objStatusId = session.getAttribute(INSTALL_STATUS);		Object objMonitor = fStatusMap.get(objMonitorId);		Object objStatus = fStatusMap.get(objStatusId);		if(!(objMonitor instanceof AjaxProgressMonitor) || !(objStatus instanceof Status)) {			return;		}		// retrieve the monitor result		Element el = XMLUtils.newElement("div");		// set the status		Status status = (Status)objStatus;		AjaxProgressMonitor monitor = (AjaxProgressMonitor)objMonitor;		if(status.getStatus() == Status.ERROR) {			el.setAttribute("status", "error");			// set the error message			Element elMsg = XMLUtils.addElement(el, "div");			elMsg.setAttribute("class", "rqerror");			if(status.getException() != null) {				String msg = status.getException().getMessage();				XMLUtils.setText(elMsg, msg);			} else {				XMLUtils.setText(elMsg, "Error");			}			fStatusMap.remove(objMonitorId);			fStatusMap.remove(objStatusId);			request.getSession().setAttribute(INSTALL_MONITOR, null);			request.getSession().setAttribute(INSTALL_STATUS, null);		} else if(status.getStatus() == Status.DONE) {			el.setAttribute("status", "done");			Element elMsg = XMLUtils.addElement(el, "div");			elMsg.setAttribute("class", "rqtask");			XMLUtils.setText(elMsg, "Application installed successfully");			fStatusMap.remove(objMonitorId);			fStatusMap.remove(objStatusId);			request.getSession().setAttribute(INSTALL_MONITOR, null);			request.getSession().setAttribute(INSTALL_STATUS, null);					} else if(status.getStatus() == Status.NEW) {			// still waiting to start			Element elMsg = XMLUtils.addElement(el, "div");			XMLUtils.setText(elMsg, "Installation in progress. Please wait");			Element elWait = XMLUtils.addElement(el, "div");			elWait.setAttribute("class", "rqwait");			XMLUtils.addElement(elWait, "span", "Please wait");		} else {			monitor.renderProgress(el);		}		// render the response as an ajax packet		String xml = "";		try {			xml = XMLUtils.DocumentToString(el.getOwnerDocument());		} catch(Exception e) {			// ignore this one		}        response.setContentType("text/xml");        String encoding = null;        if(!"false".equals(System.getProperty("com.requea.dynpage.compressoutput"))) {        	encoding = request.getHeader("Accept-Encoding");        }        boolean supportsGzip = false;        if (encoding != null) {	    	if (encoding.toLowerCase().indexOf("gzip") > -1) {	    		supportsGzip = true;    		}    	}        // then write the content as utf-8: zip it if the requests accept zip, since xml compresses VERY well        OutputStream os = response.getOutputStream();        if(supportsGzip) {        	os = new GZIPOutputStream(os);        	response.setHeader("Content-Encoding", "gzip");        }        Writer w = new OutputStreamWriter(os, "UTF-8");        w.write(xml);        w.close();	}	public static ConcurrentHashMap fStatusMap = new ConcurrentHashMap();	private void handleInstallBundleRequest(HttpServletRequest request,			HttpServletResponse response, Element elConfig) throws IOException, ServletException {				BundleContext context = Activator.getDefault().getContext();		try {			Installable[] all = fInstallManager.getInstallables(request, response, elConfig);						ArrayList lst = new ArrayList();			Installable installedResource = null;						// get the list of resources that need to be installed			Map map = request.getParameterMap();			Iterator iter = map.keySet().iterator();			while(iter.hasNext()) {				String strParam = (String)iter.next();				if(strParam.startsWith("inst_")) {					Object value = map.get(strParam);					if(value instanceof String[]) {						String[] vals = (String[])value;						if(vals.length > 0)							value = vals[0];					}					if("install".equals(value)) {						String strInstallable = strParam.substring("inst_".length());						if(strInstallable.length() > 0) {							// find the requested resource							Installable res = findResource(all, strInstallable);							if(res == null) {								throw new Exception("Unable to find resource '"+strInstallable+"'. Cannot deploy");							}							installedResource = res;							// find dependent features							getDependentFeatures(lst, all, res);							if(!lst.contains(res)) {								// adds at the end								lst.add(res);							}						}					}				}			}						// turn it as an array			Installable[] installables = (Installable[])lst.toArray(new Installable[lst.size()]);            String ver = request.getParameter("ver");            if(ver == null || ver.equals("")) {                ver = (String) request.getSession().getAttribute(InstallManager.CURRENTVERSION);            }            if("".equals(ver) || "base".equals(ver)) {                ver = null;            }			String restart_option = request.getParameter("restart_option");			RepositoryAdmin repo = fInstallManager.initRepo(fConfigDir, elConfig, ver);						PackageAdmin pa = null;	        ServiceReference ref = context.getServiceReference(	                org.osgi.service.packageadmin.PackageAdmin.class.getName());            if (ref != null) {	            pa = (PackageAdmin) context.getService(ref);            }			            			// once we have the repo, we ask for deployment			// create the progress monitor			AjaxProgressMonitor monitor = new AjaxProgressMonitor();			Status status = new Status();			fStatusMap.put(monitor.getId(), monitor);			fStatusMap.put(status.getId(), status);			request.getSession().setAttribute(INSTALL_MONITOR, monitor.getId());			request.getSession().setAttribute(INSTALL_STATUS, status.getId());			// launch the thread to install the bundles			Thread th = new Thread(fInstallManager.newInstaller(elConfig, context, pa, repo, installables, monitor, status, "true".equals(restart_option)));			th.start();						request.setAttribute(INSTALLABLE, installedResource);			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/progress.jsp");			rd.forward(request, response);		} catch (Exception e) {			// show the error			request.setAttribute(ErrorTag.ERROR, "Unable to install resources: " + e.getMessage());			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/setup.jsp");			rd.forward(request, response);		}	}	private void getDependentFeatures(List lst, Installable[] allFeatures,			Installable feature) {		List depends = feature.getDependsOn();		for(int i=0; depends != null && i<depends.size(); i++) {			String sysId = (String)depends.get(i);						// find the feature			Installable f = null;			for(int j=0; f == null && j<allFeatures.length; j++) {				if(sysId.equals(allFeatures[j].getSysId())) {					f = allFeatures[j];				}			}			if(f != null && !lst.contains(f)) {				// adds at the top				lst.add(0, f);				// get dependents features for this one				getDependentFeatures(lst, allFeatures, f);			}		}	}		private void handleInstallPanelRequest(HttpServletRequest request,			HttpServletResponse response, Element elConfig) throws Exception {		InstallManager.Status status = (InstallManager.Status)request.getSession().getAttribute(INSTALL_STATUS);		if(status != null && status.getStatus() != InstallManager.Status.ERROR && status.getStatus() != InstallManager.Status.DONE) {			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/progress.jsp");			rd.forward(request, response);			return;		}				// is there an install config?		File file = new File(fConfigDir, "dysoweb.p12");		if(!file.exists()) {			// redirect to settings			initSettingsValues(request);			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/settings.jsp");			rd.forward(request, response);			return;		}		// init the socket factory		fInstallManager.initHttpClient(elConfig);		// init restart command		if (fInstallManager.getRestartCommand() != null)			request.setAttribute(InstallManager.RESTART_OPTION, Boolean.TRUE);		Installable[] installables = fInstallManager.getInstallables(request, response, elConfig);		Installable resource = findResource(installables, request.getParameter("resource"));		// lookup for the resource		if(resource != null) {			request.setAttribute(INSTALLABLE, resource);			// show resource detail			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/installfeat.jsp");			rd.forward(request, response);		} else {			// show list of resources			RequestDispatcher rd = request.getRequestDispatcher("/dysoweb/panel/secure/setup.jsp");			rd.forward(request, response);		}				return;	}		private void updateSettingsValues(HttpServletRequest request) {		HttpSession session = request.getSession();				updateValue(session, request, "RepoURL");		updateValue(session, request, "AuthKey");		updateValue(session, request, "Version");		updateValue(session, request, "Settings");		updateValue(session, request, "Proxy");		updateValue(session, request, "ProxyPAC");		updateValue(session, request, "ProxyHost");		updateValue(session, request, "ProxyPort");		updateValue(session, request, "ProxyAuth");        updateValue(session, request, "ProxyUsername");        updateValue(session, request, "ProxyPassword");        updateValue(session, request, "ProxyNTDomain");		updateValue(session, request, "LocalCacheURL");	}	private void updateValue(HttpSession session, HttpServletRequest request,			String param) {		String value = request.getParameter(param);		if(value != null) {			// password are stored encrypted			if("ProxyPassword".equals(param) && !"".equals(value) && !value.startsWith("3DES:")) {				try {					CryptUtils cu = CryptUtils.getInstance("3DES");					value = "3DES:"+cu.encrypt(value);				} catch(Exception e) {					// ignore				}			}						setValueInSession(session, param, value);		}	}		private void initSettingsValues(HttpServletRequest request) {		HttpSession session = request.getSession();		String repoURL = getValueFromSession(session, "RepoURL");		if(repoURL != null && repoURL.length() > 0) {			// already done			return;		}				// load the config		Element elConfig = InstallManager.getServerConfig(fConfigDir);		repoURL = XMLUtils.getChildText(elConfig, "RepoURL");		if(repoURL == null || repoURL.length() == 0) {			repoURL = InstallManager.DEFAULT_REPO;		}		setValueInSession(session, "RepoURL", repoURL);		// auth key		String authKey = XMLUtils.getChildText(elConfig, "AuthKey");		if(authKey == null) {			authKey = "";		}		setValueInSession(session, "AuthKey", authKey);				// version		String version = XMLUtils.getChildText(elConfig, "Version");		if(version == null) {			version = "demo";		}		setValueInSession(session, "Version", version);				// settings		String settings = XMLUtils.getChildText(elConfig, "Settings");		if(settings == null) {			settings = "auto";		}		setValueInSession(session, "Settings", settings);				// proxy		String proxy = XMLUtils.getChildText(elConfig, "Proxy");		if(proxy == null) {			proxy = "auto";		}		setValueInSession(session, "Proxy", proxy);				// proxy pac		String proxyPAC = XMLUtils.getChildText(elConfig, "ProxyPAC");		if(proxyPAC == null) {			proxyPAC = "";		}		setValueInSession(session, "ProxyPAC", proxyPAC);				// proxy host		String proxyHost = XMLUtils.getChildText(elConfig, "ProxyHost");		if(proxyHost == null) {			proxyHost = "";		}		setValueInSession(session, "ProxyHost", proxyHost);				// proxy port		String proxyPort = XMLUtils.getChildText(elConfig, "ProxyPort");		if(proxyPort == null) {			proxyPort = "80";		}		setValueInSession(session, "ProxyPort", proxyPort);				// proxy auth		String proxyAuth = XMLUtils.getChildText(elConfig, "ProxyAuth");		if(proxyAuth == null) {			proxyAuth = "";		}		setValueInSession(session, "ProxyAuth", proxyAuth);		        // proxy auth        String proxyUsername = XMLUtils.getChildText(elConfig, "ProxyUsername");        if(proxyUsername == null) {            proxyUsername = "";        }        setValueInSession(session, "ProxyUsername", proxyUsername);        String proxyPassword = XMLUtils.getChildText(elConfig, "ProxyPassword");        if(proxyPassword == null) {            proxyPassword = "";        }        setValueInSession(session, "ProxyPassword", proxyPassword);                String proxyNTDomain = XMLUtils.getChildText(elConfig, "ProxyNTDomain");        if(proxyNTDomain == null) {        	proxyNTDomain = "";        }        setValueInSession(session, "ProxyNTDomain", proxyNTDomain);        		// localcache		String local = XMLUtils.getChildText(elConfig, "LocalCacheURL");		if(local == null) {			local = "";		}		setValueInSession(session, "LocalCacheURL", local);	}			private String getValueFromSession(HttpSession session, String name) {		return (String)session.getAttribute(COM_REQUEA_DYSOWEB_PANEL+name);	}	private void setValueInSession(HttpSession session, String name, String value) {		if(value == null || "".equals(value)) {			session.removeAttribute(COM_REQUEA_DYSOWEB_PANEL+name);		} else {			session.setAttribute(COM_REQUEA_DYSOWEB_PANEL+name, value);		}	}			private Installable findResource(Installable[] installables, String str) {		Installable resource = null;		if(installables != null && str != null) {			// retrieve the resource			for(int i=0; resource == null && i<installables.length; i++) {				if(str.equals(installables[i].getID())) {					resource = installables[i];				}			}		}		return resource;	}			public static void saveConfig(File configDir, String authKey, String strPassword) throws Exception {		if (!configDir.exists()) {			configDir.mkdirs();		}				Element elConfig = InstallManager.getServerConfig(configDir);		if(elConfig == null) {			elConfig = XMLUtils.newElement("server");		}		// store the password		if(strPassword != null && strPassword.length() > 0) {			setElementValue(elConfig, "Password", SecurityServlet.encrypt(strPassword));		}		if(authKey != null && authKey.length() > 0) {			setElementValue(elConfig, "AuthKey", authKey);		}		// output the content as XML		String xml = XMLUtils.ElementToString(elConfig, true);		OutputStream os = new FileOutputStream(new File(configDir, "server.xml"));		Writer w = new OutputStreamWriter(os, "UTF-8");		w.write(xml);		w.close();	}	private static void setElementValue(Element elServer, String tag, String value)			throws RegistrationException {				Element elPassword = XMLUtils.getChild(elServer, tag);		if(elPassword == null) 			elPassword = XMLUtils.addElement(elServer, tag);				XMLUtils.setText(elPassword, value);	}    		private void removeConfigValue(Element elConfig, String name) {		Element elVal = XMLUtils.getChild(elConfig, name);		if(elVal != null) {			elConfig.removeChild(elVal);		}	}	private void saveConfigValue(HttpServletRequest request, Element elConfig,			String name) {				HttpSession session = request.getSession();		String value = (String)session.getAttribute(COM_REQUEA_DYSOWEB_PANEL+name);		if(value == null) {			value = "";		}		Element elVal = XMLUtils.getChild(elConfig, name);		if(elVal == null) {			elVal = XMLUtils.addElement(elConfig, name);		}		XMLUtils.setText(elVal, value);	}		private void saveSettings(HttpServletRequest request) {		// save the content in the config file		Element elConfig = InstallManager.getServerConfig(fConfigDir);		saveConfigValue(request, elConfig, "Settings");		String settings = (String)request.getSession().getAttribute(COM_REQUEA_DYSOWEB_PANEL+"Settings");		if("manual".equals(settings)) {			saveConfigValue(request, elConfig, "RepoURL");			saveConfigValue(request, elConfig, "ProxyPAC");			saveConfigValue(request, elConfig, "ProxyHost");			saveConfigValue(request, elConfig, "ProxyPort");            saveConfigValue(request, elConfig, "ProxyUsername");            saveConfigValue(request, elConfig, "ProxyPassword");            saveConfigValue(request, elConfig, "ProxyNTDomain");			saveConfigValue(request, elConfig, "LocalCacheURL");		} else {			removeConfigValue(elConfig, "ProxyPAC");			removeConfigValue(elConfig, "ProxyHost");			removeConfigValue(elConfig, "ProxyPort");			removeConfigValue(elConfig, "ProxyAuth");            removeConfigValue(elConfig, "ProxyUsername");            removeConfigValue(elConfig, "ProxyPassword");            removeConfigValue(elConfig, "ProxyNTDomain");			removeConfigValue(elConfig, "LocalCacheURL");		}		// save the config		try {	        String xml = XMLUtils.DocumentToString(elConfig.getOwnerDocument(), true);	        File file = new File(fConfigDir, "server.xml");	        // then write the content as utf-8: zip it if the requests accept zip, since xml compresses VERY well	        Writer w = new OutputStreamWriter(new FileOutputStream(file), "UTF-8");	        w.write(xml);	        w.close();		} catch(Exception e) {			request.setAttribute(ErrorTag.ERROR, e);		}	}	}